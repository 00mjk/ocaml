type t1 = A of string [@@unboxed]
- : bool = true
type t2 = { f : string; } [@@unboxed]
- : bool = true
type t3 = B of { g : string; } [@@unboxed]
- : bool = true
Line 3, characters 0-29:
3 | type t4 = C [@@ocaml.unboxed];;  (* no argument *)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: This type cannot be unboxed because its constructor has no argument.
Line 1, characters 0-45:
1 | type t5 = D of int * string [@@ocaml.unboxed];; (* more than one argument *)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: This type cannot be unboxed because
       its constructor has more than one argument.
Line 1, characters 0-33:
1 | type t5 = E | F [@@ocaml.unboxed];;          (* more than one constructor *)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: This type cannot be unboxed because it has more than one constructor.
Line 1, characters 0-40:
1 | type t6 = G of int | H [@@ocaml.unboxed];;
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: This type cannot be unboxed because it has more than one constructor.
Line 1, characters 0-51:
1 | type t7 = I of string | J of bool [@@ocaml.unboxed];;
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: This type cannot be unboxed because it has more than one constructor.
Line 2, characters 0-49:
2 | type t8 = { h : bool; i : int } [@@ocaml.unboxed];;  (* more than one field *)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: This type cannot be unboxed because it has more than one field.
Line 1, characters 0-56:
1 | type t9 = K of { j : string; l : int } [@@ocaml.unboxed];;
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: This type cannot be unboxed because
       its constructor has more than one argument.
type t10 = A of t10 [@@unboxed]
Line 1, characters 12-15:
1 | let rec x = A x;;
                ^^^
Error: This kind of expression is not allowed as right-hand side of `let rec'
Line 5, characters 6-57:
5 | ......struct
  |   type t = A of string [@@ocaml.unboxed]
7 | end..
Error: Signature mismatch:
       Modules do not match:
         sig type t = A of string [@@unboxed] end
       is not included in
         sig type t = A of string end
       Type declarations do not match:
         type t = A of string [@@unboxed]
       is not included in
         type t = A of string
       Their internal representations differ:
       the first declaration uses unboxed representation.
Line 4, characters 6-39:
4 | ......struct
  |   type t = A of string
6 | end..
Error: Signature mismatch:
       Modules do not match:
         sig type t = A of string end
       is not included in
         sig type t = A of string [@@unboxed] end
       Type declarations do not match:
         type t = A of string
       is not included in
         type t = A of string [@@unboxed]
       Their internal representations differ:
       the second declaration uses unboxed representation.
Line 4, characters 6-60:
4 | ......struct
  |   type t = { f : string } [@@ocaml.unboxed]
6 | end..
Error: Signature mismatch:
       Modules do not match:
         sig type t = { f : string; } [@@unboxed] end
       is not included in
         sig type t = { f : string; } end
       Type declarations do not match:
         type t = { f : string; } [@@unboxed]
       is not included in
         type t = { f : string; }
       Their internal representations differ:
       the first declaration uses unboxed representation.
Line 4, characters 6-42:
4 | ......struct
  |   type t = { f : string }
6 | end..
Error: Signature mismatch:
       Modules do not match:
         sig type t = { f : string; } end
       is not included in
         sig type t = { f : string; } [@@unboxed] end
       Type declarations do not match:
         type t = { f : string; }
       is not included in
         type t = { f : string; } [@@unboxed]
       Their internal representations differ:
       the second declaration uses unboxed representation.
Line 4, characters 6-65:
4 | ......struct
  |   type t = A of { f : string } [@@ocaml.unboxed]
6 | end..
Error: Signature mismatch:
       Modules do not match:
         sig type t = A of { f : string; } [@@unboxed] end
       is not included in
         sig type t = A of { f : string; } end
       Type declarations do not match:
         type t = A of { f : string; } [@@unboxed]
       is not included in
         type t = A of { f : string; }
       Their internal representations differ:
       the first declaration uses unboxed representation.
Line 4, characters 6-47:
4 | ......struct
  |   type t = A of { f : string }
6 | end..
Error: Signature mismatch:
       Modules do not match:
         sig type t = A of { f : string; } end
       is not included in
         sig type t = A of { f : string; } [@@unboxed] end
       Type declarations do not match:
         type t = A of { f : string; }
       is not included in
         type t = A of { f : string; } [@@unboxed]
       Their internal representations differ:
       the second declaration uses unboxed representation.
type t11 = L of float [@@unboxed]
- : unit = ()
type 'a t12 = M of 'a t12 [@@unboxed]
val f : int t12 array -> int t12 = <fun>
type t13 = A : 'a t12 -> t13 [@@unboxed]
type t14
type t15 = A of t14 [@@unboxed]
type 'a abs
Line 1, characters 0-45:
1 | type t16 = A : _ abs -> t16 [@@ocaml.unboxed];;
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: This type cannot be unboxed because
       it might contain both float and non-float values.
       You should annotate it with [@@ocaml.boxed].
Line 3, characters 0-50:
3 | type t18 = A : _ list abs -> t18 [@@ocaml.unboxed];;
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: This type cannot be unboxed because
       it might contain both float and non-float values.
       You should annotate it with [@@ocaml.boxed].
Line 7, characters 6-86:
 7 | ......struct
   |   type t = A of float [@@ocaml.unboxed]
   |   type u = { f1 : t; f2 : t }
10 | end..
Error: Signature mismatch:
       ...
       Type declarations do not match:
         type u = { f1 : t; f2 : t; }
       is not included in
         type u = { f1 : t; f2 : t; }
       Their internal representations differ:
       the first declaration uses unboxed float representation.
module T : sig type t [@@immediate] end
type 'a s = S : 'a -> 'a s [@@unboxed]
Line 1, characters 0-33:
1 | type t = T : _ s -> t [@@unboxed];;
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: This type cannot be unboxed because
       it might contain both float and non-float values.
       You should annotate it with [@@ocaml.boxed].
type 'a s = S : 'a -> 'a option s [@@unboxed]
Line 1, characters 0-33:
1 | type t = T : _ s -> t [@@unboxed];;
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: This type cannot be unboxed because
       it might contain both float and non-float values.
       You should annotate it with [@@ocaml.boxed].
module M :
  sig type 'a r constraint 'a = unit -> 'b val inj : 'b -> (unit -> 'b) r end
Line 3, characters 0-45:
3 | type t = T : (unit -> _) M.r -> t [@@unboxed];;
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: This type cannot be unboxed because
       it might contain both float and non-float values.
       You should annotate it with [@@ocaml.boxed].
type 'a s = S : (unit -> 'a) M.r -> 'a option s [@@unboxed]
Line 3, characters 0-33:
3 | type t = T : _ s -> t [@@unboxed];;
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: This type cannot be unboxed because
       it might contain both float and non-float values.
       You should annotate it with [@@ocaml.boxed].
type 'a t = T : 'a s -> 'a t [@@unboxed]
Line 4, characters 0-39:
4 | type _ s = S : 'a t -> _ s  [@@unboxed]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: This type cannot be unboxed because
       it might contain both float and non-float values.
       You should annotate it with [@@ocaml.boxed].
type 'a s
type ('a, 'p) t = private 'a s
type 'a packed = T : ('a, 'b) t -> 'a packed [@@unboxed]
type f = { field : 'a. 'a list; } [@@unboxed]
val g : f array =
  [|{field = []}; {field = []}; {field = []}; {field = []}; {field = []};
    {field = []}; {field = []}; {field = []}; {field = []}; {field = []}|]
val h : f = {field = []}
type 'a t [@@immediate]
type u = U : 'a t -> u [@@unboxed]

