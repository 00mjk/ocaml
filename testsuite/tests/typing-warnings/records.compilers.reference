module M1 :
  sig type t = { x : int; y : int; } type u = { x : bool; y : bool; } end
Line 4, characters 19-20:
    let f1 (r:t) = r.x (* ok *)
                     ^
Warning 42: this use of x relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
Line 5, characters 29-30:
    let f2 r = ignore (r:t); r.x (* non principal *)
                               ^
Warning 42: this use of x relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
Line 8, characters 18-19:
      match r with {x; y} -> y + y (* ok *)
                    ^
Warning 42: this use of x relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
Line 8, characters 21-22:
      match r with {x; y} -> y + y (* ok *)
                       ^
Warning 42: this use of y relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
Line 8, characters 18-19:
      match r with {x; y} -> y + y (* ok *)
                    ^
Warning 27: unused variable x.
module OK :
  sig val f1 : M1.t -> int val f2 : M1.t -> int val f3 : M1.t -> int end
Line 4, characters 25-31:
    let f r = match r with {x; y} -> y + y
                           ^^^^^^
Warning 41: these field labels belong to several types: M1.u M1.t
The first one was selected. Please disambiguate if this is wrong.
Line 4, characters 35-36:
    let f r = match r with {x; y} -> y + y
                                     ^
Error: This expression has type bool but an expression was expected of type
         int
Line 7, characters 8-9:
         {x; y} -> y + y
          ^
Warning 42: this use of x relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
Line 7, characters 11-12:
         {x; y} -> y + y
             ^
Warning 42: this use of y relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
Line 7, characters 8-9:
         {x; y} -> y + y
          ^
Warning 27: unused variable x.
module F2 : sig val f : M1.t -> int end
module M : sig type t = { x : int; } type u = { x : bool; } end
Line 1, characters 18-21:
  let f (r:M.t) = r.M.x;; (* ok *)
                    ^^^
Warning 42: this use of x relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
val f : M.t -> int = <fun>
Line 1, characters 18-19:
  let f (r:M.t) = r.x;; (* warning *)
                    ^
Warning 40: x was selected from type M.t.
It is not visible in the current scope, and will not 
be selected if the type becomes unknown.
Line 1, characters 18-19:
  let f (r:M.t) = r.x;; (* warning *)
                    ^
Warning 42: this use of x relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
val f : M.t -> int = <fun>
Line 1, characters 8-9:
  let f ({x}:M.t) = x;; (* warning *)
          ^
Warning 42: this use of x relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
Line 1, characters 7-10:
  let f ({x}:M.t) = x;; (* warning *)
         ^^^
Warning 40: this record of type M.t contains fields that are 
not visible in the current scope: x.
They will not be selected if the type becomes unknown.
val f : M.t -> int = <fun>
module M : sig type t = { x : int; y : int; } end
module N : sig type u = { x : bool; y : bool; } end
Line 4, characters 20-21:
    let f (r:M.t) = r.x
                      ^
Warning 42: this use of x relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
Line 3, characters 2-8:
    open N
    ^^^^^^
Warning 33: unused open N.
module OK : sig val f : M.t -> int end
module M :
  sig
    type t = { x : int; }
    module N : sig type s = t = { x : int; } end
    type u = { x : bool; }
  end
module OK : sig val f : M.t -> int end
module M :
  sig
    type u = { x : bool; y : int; z : char; }
    type t = { x : int; y : bool; }
  end
Line 3, characters 9-10:
    let f {x;z} = x,z
           ^
Warning 42: this use of x relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
Line 3, characters 8-13:
    let f {x;z} = x,z
          ^^^^^
Warning 9: the following labels are not bound in this record pattern:
y
Either bind these labels explicitly or add '; _' to the pattern.
module OK : sig val f : M.u -> bool * char end
Line 3, characters 10-24:
    let r = {x=true;z='z'}
            ^^^^^^^^^^^^^^
Error: Some record fields are undefined: y
Line 5, characters 11-12:
    let r = {x=3; y=true}
             ^
Warning 42: this use of x relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
Line 5, characters 16-17:
    let r = {x=3; y=true}
                  ^
Warning 42: this use of y relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
module OK :
  sig
    type u = { x : int; y : bool; }
    type t = { x : bool; y : int; z : char; }
    val r : u
  end
Line 7, characters 22-23:
    let b : bar = {x=3; y=4}
                        ^
Error: This record expression is expected to have type bar
       The field y does not belong to type bar
module M : sig type foo = { x : int; y : int; } end
module N : sig type bar = { x : int; y : int; } end
Line 1, characters 19-22:
  let r = { M.x = 3; N.y = 4; };; (* error: different definitions *)
                     ^^^
Error: The record field N.y belongs to the type N.bar
       but is mixed here with fields of type M.foo
module MN :
  sig
    type foo = M.foo = { x : int; y : int; }
    type bar = N.bar = { x : int; y : int; }
  end
module NM :
  sig
    type bar = N.bar = { x : int; y : int; }
    type foo = M.foo = { x : int; y : int; }
  end
Line 1, characters 8-28:
  let r = {MN.x = 3; NM.y = 4};; (* error: type would change with order *)
          ^^^^^^^^^^^^^^^^^^^^
Warning 41: x belongs to several types: MN.bar MN.foo
The first one was selected. Please disambiguate if this is wrong.
Line 1, characters 8-28:
  let r = {MN.x = 3; NM.y = 4};; (* error: type would change with order *)
          ^^^^^^^^^^^^^^^^^^^^
Warning 41: y belongs to several types: NM.foo NM.bar
The first one was selected. Please disambiguate if this is wrong.
Line 1, characters 19-23:
  let r = {MN.x = 3; NM.y = 4};; (* error: type would change with order *)
                     ^^^^
Error: The record field NM.y belongs to the type NM.foo = M.foo
       but is mixed here with fields of type MN.bar = N.bar
module M :
  sig
    type foo = { x : int; y : int; }
    type bar = { x : int; y : int; z : int; }
  end
Line 3, characters 37-38:
    let f r = ignore (r: foo); {r with x = 2; z = 3}
                                       ^
Warning 42: this use of x relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
Line 3, characters 44-45:
    let f r = ignore (r: foo); {r with x = 2; z = 3}
                                              ^
Error: This record expression is expected to have type M.foo
       The field z does not belong to type M.foo
module M :
  sig
    type foo = M.foo = { x : int; y : int; }
    type bar = M.bar = { x : int; y : int; z : int; }
    type other = { a : int; b : int; }
  end
Line 3, characters 38-39:
    let f r = ignore (r: foo); { r with x = 3; a = 4 }
                                        ^
Warning 42: this use of x relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
Line 3, characters 45-46:
    let f r = ignore (r: foo); { r with x = 3; a = 4 }
                                               ^
Error: This record expression is expected to have type M.foo
       The field a does not belong to type M.foo
Line 3, characters 11-12:
    let r = {x=1; y=2}
             ^
Warning 42: this use of x relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
Line 3, characters 16-17:
    let r = {x=1; y=2}
                  ^
Warning 42: this use of y relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
Line 4, characters 18-19:
    let r: other = {x=1; y=2}
                    ^
Error: This record expression is expected to have type M.other
       The field x does not belong to type M.other
module A : sig type t = { x : int; } end
module B : sig type t = { x : int; } end
Line 1, characters 20-23:
  let f (r : B.t) = r.A.x;; (* fail *)
                      ^^^
Error: The field A.x belongs to the record type A.t
       but a field was expected belonging to the record type B.t
Line 6, characters 19-22:
    let a : t = {x=1;yyz=2}
                     ^^^
Error: This record expression is expected to have type t
       The field yyz does not belong to type t
Hint: Did you mean yyy?
type t = A
type s = A
class f : t -> object  end
Line 1, characters 12-13:
  class g = f A;; (* ok *)
              ^
Warning 42: this use of A relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
class g : f
class f : 'a -> 'a -> object  end
Line 1, characters 13-14:
  class g = f (A : t) A;; (* warn with -principal *)
               ^
Warning 42: this use of A relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
Line 1, characters 20-21:
  class g = f (A : t) A;; (* warn with -principal *)
                      ^
Warning 42: this use of A relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
class g : f
Line 11, characters 15-16:
    let y : t = {x = 0}
                 ^
Warning 42: this use of x relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
Line 10, characters 2-8:
    open M  (* this open is unused, it isn't reported as shadowing 'x' *)
    ^^^^^^
Warning 33: unused open M.
module Shadow1 :
  sig
    type t = { x : int; }
    module M : sig type s = { x : string; } end
    val y : t
  end
Line 6, characters 2-8:
    open M  (* this open shadows label 'x' *)
    ^^^^^^
Warning 45: this open statement shadows the label x (which is later used)
Line 7, characters 10-18:
    let y = {x = ""}
            ^^^^^^^^
Warning 41: these field labels belong to several types: M.s t
The first one was selected. Please disambiguate if this is wrong.
module Shadow2 :
  sig
    type t = { x : int; }
    module M : sig type s = { x : string; } end
    val y : M.s
  end
Line 8, characters 37-40:
    let f (u : u) = match u with `Key {loc} -> loc
                                       ^^^
Warning 42: this use of loc relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
module P6235 :
  sig
    type t = { loc : string; }
    type v = { loc : string; x : int; }
    type u = [ `Key of t ]
    val f : u -> string
  end
Line 10, characters 11-14:
      |`Key {loc} -> loc
             ^^^
Warning 42: this use of loc relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
module P6235' :
  sig
    type t = { loc : string; }
    type v = { loc : string; x : int; }
    type u = [ `Key of t ]
    val f : u -> string
  end

