#!/bin/awk -f

#########################################################################
#                                                                       #
#                                 OCaml                                 #
#                                                                       #
#                Damien Doligez, Jane Street Capital                    #
#                                                                       #
#   Copyright 2014 Institut National de Recherche en Informatique et    #
#   en Automatique.  All rights reserved.  This file is distributed     #
#   under the terms of the Q Public License version 1.0.                #
#                                                                       #
#########################################################################

function add(limit, name){
    lim[nscales] = limit;
    scale[nscales] = name;
    ++ nscales;
}

BEGIN {
    nscales=0;
    add(100, "100ns");
    add(220, "220ns");
    add(470, "470ns");
    add(1000, "1.0us");
    add(2200, "2.2us");
    add(4700, "4.7us");
    add(10000, "10us");
    add(22000, "22us");
    add(47000, "47us");
    add(100000, "100us");
    add(220000, "220us");
    add(470000, "470us");
    add(1000000, "1.0ms");
    add(2200000, "2.2ms");
    add(4700000, "4.7ms");
    add(10000000, "10ms");
    add(22000000, "22ms");
    add(47000000, "47ms");
    add(100000000, "100ms");
    add(220000000, "220ms");
    add(470000000, "470ms");
    add(1000000000, "1.0s");
    add(2200000000, "2.2s");
    add(4700000000, "4.7s");
    scales[nscales] = "inf";
}

function store(value,tag) {
    ++ total[tag];
    for (i = 0; i < nscales; i++){
        if (value <= lim[i]){
            ++ bin[tag, lim[i]];
            return;
        }
    }
    ++ bin[tag, "off-scale"];
}

$1 == "@TIMERS@" {
    store($2, $3);
}

function display(n,   i) {
    if (n > 0){
        for (i = 0; i < log (n); i++){
            printf("#");
        }
        printf(" %-6d ", n);
        for (i = i; i < 25; i++){
            printf(" ");
        }
    }else{
        printf("                                 ");
    }
}

END {
    n = asorti(total,tags);
    for (i = 1; i <= n; i++){
        t = tags[i];
        printf ("==== %s: %d\n", t, total[t]);
        found = 0;
        for (j = 0; j < nscales; j++){
            found += bin [t, lim[j]];
            if (found > 0){
                printf ("%5s..%-5s: ", scale[j], scale[j+1]);
                display(bin[t, lim[j]]);
                printf ("%6.2f%%\n", found * 100 / total[t]);
                if (found == total[t]) break;
            }
        }
        if (bin[t, "off-scale"] != 0){
            printf ("  off scale : ");
            display(bin[t, "off-scale"]);
            printf ("\n");
        }
        printf ("====\n");
    }
}
