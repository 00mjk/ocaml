#!/bin/awk -f

#########################################################################
#                                                                       #
#                                 OCaml                                 #
#                                                                       #
#                Damien Doligez, Jane Street Capital                    #
#                                                                       #
#   Copyright 2014 Institut National de Recherche en Informatique et    #
#   en Automatique.  All rights reserved.  This file is distributed     #
#   under the terms of the Q Public License version 1.0.                #
#                                                                       #
#########################################################################

function short(n,    i, r){
    for (i = 0; i < 5; i++){
        if (n < 1000) break;
        n /= 1000;
    }
    r = sprintf ("%f", n);
    if (index(r, ".") == 3){
        r = substr(r, 1, 2);
    }else{
        r = substr(r, 1, 3);
    }
    return sprintf("%s%s", r, units[i]);
}

function add(limit){
    lim[nscales] = limit;
    scale[nscales] = short(limit);
    ++ nscales;
}

BEGIN {
    units[0] = "ns";
    units[1] = "us";
    units[2] = "ms";
    units[3] = "s";
    units[4] = "ks";
    units[5] = "Ms";

    nscales=0;
    add(0);
    for (mul = 100; mul < 10000000000; mul *= 10){
        add(mul);
        add(2.2 * mul);
        add(4.7 * mul);
    }
}

function store(value,tag) {
    ++ total[tag];
    for (i = 0; i < nscales; i++){
        if (value < lim[i]){
            ++ bin[tag, lim[i]];
            val[tag, lim[i]] = value;
            return;
        }
    }
    ++ bin[tag, "off-scale"];
    val[tag, "off-scale"] = value;
}

$1 == "@@OCAML_TIMERS" {
    store($2, $3);
}

function display(n, val,   i) {
    if (n > 0){
        for (i = 0; i < log (n); i++){
            printf("#");
        }
        printf(" %-6d", n);
        if (n == 1){
            printf ("%-7s", sprintf("(%s)", short(val)));
            for (i = i; i < 18; i++) printf(" ");
        }else{
            for (i = i; i < 25; i++) printf(" ");
        }
    }else{
        printf("                                ");
    }
}

END {
    n = asorti(total,tags);
    for (i = 1; i <= n; i++){
        t = tags[i];
        printf ("==== %s: %d\n", t, total[t]);
        found = 0;
        for (j = 1; j < nscales; j++){
            num = bin [t, lim[j]];
            found += num;
            if (found > 0){
                printf ("%5s..%-5s: ", scale[j-1], scale[j]);
                display(num, val[t, lim[j]]);
                printf ("%6.2f%%\n", found * 100 / total[t]);
                if (found == total[t]) break;
            }
        }
        num = bin[t, "off-scale"];
        if (num != 0){
            printf ("  off scale : ");
            display(bin[t, "off-scale"], val[t, "off-scale"]);
            printf ("\n");
        }
        printf ("====\n");
    }
}
